using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using ModAPI.Core;

namespace Manager
{
    public partial class ManagerGUI
    {
        private void onLaunchClicked(object sender, EventArgs e)
        {
            SaveSettings();
            try { SetupDoorstop(); } catch { }

            if (!PreflightCheck()) return;

            try
            {
                // Read current settings
                var settings = ReadIniSettings();
                string devMode, logLevel, logCategories, ignoreOrderChecks;
                settings.TryGetValue("DevMode", out devMode);
                settings.TryGetValue("LogLevel", out logLevel);
                settings.TryGetValue("LogCategories", out logCategories);
                settings.TryGetValue("IgnoreOrderChecks", out ignoreOrderChecks);

                bool isDev = false; bool.TryParse(devMode ?? "false", out isDev);

                // Write SMM/mod_manager.ini next to the game for runtime
                try
                {
                    var gameDir = Path.GetDirectoryName(uiGamePath.Text);
                    var smmDir = Path.Combine(gameDir, "SMM");
                    Directory.CreateDirectory(smmDir);
                    var iniPath = Path.Combine(smmDir, "mod_manager.ini");
                    var lines = new List<string>();
                    lines.Add("# Generated by Manager at launch to handle user settings");
                    lines.Add("GamePath=" + (uiGamePath.Text ?? string.Empty));
                    lines.Add("DarkMode=" + ((darkModeToggle != null && darkModeToggle.Checked) ? "True" : "False"));
                    lines.Add("DevMode=" + (isDev ? "True" : "False"));
                    lines.Add("LogLevel=" + (logLevel ?? "Info"));
                    lines.Add("LogCategories=" + (logCategories ?? string.Empty));
                    lines.Add("IgnoreOrderChecks=" + ((ignoreOrderChecks ?? "false").Trim().Equals("true", StringComparison.OrdinalIgnoreCase) ? "True" : "False"));
                    File.WriteAllLines(iniPath, lines.ToArray());
                }
                catch { }

                var startInfo = new ProcessStartInfo();
                startInfo.FileName = uiGamePath.Text;
                startInfo.WorkingDirectory = Path.GetDirectoryName(uiGamePath.Text);
                startInfo.UseShellExecute = false;
                Process.Start(startInfo);
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show("Failed to launch Sheltered: " + ex.Message, "Launch Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
            }
        }

        // Returns true if it's ok to proceed with launch; false if user cancels after warning
        private bool PreflightCheck()
        {
            try
            {
                if (string.IsNullOrEmpty(uiGamePath.Text) || !File.Exists(uiGamePath.Text))
                {
                    System.Windows.Forms.MessageBox.Show("Please select a valid Sheltered executable first.", "Launch Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Warning);
                    return false;
                }

                string gameDir = Path.GetDirectoryName(uiGamePath.Text);
                var missing = new List<string>();

                string winhttpPath = Path.Combine(gameDir, "winhttp.dll");
                if (!File.Exists(winhttpPath)) missing.Add("winhttp.dll (in game folder)");

                string smmDir = Path.Combine(gameDir, "SMM");
                string doorstopDll = Path.Combine(smmDir, "Doorstop.dll");
                if (!File.Exists(doorstopDll)) missing.Add("SMM/Doorstop.dll");

                string modapiDll = Path.Combine(smmDir, "ModAPI.dll");
                if (!File.Exists(modapiDll)) missing.Add("SMM/ModAPI.dll");

                if (missing.Count == 0) return true;

                string msg = "Some required files for mod injection are missing:\n\n  - "
                             + string.Join("\n  - ", missing.ToArray())
                             + "\n\nWithout these, mods will not load. Continue launching anyway?";

                var choice = System.Windows.Forms.MessageBox.Show(msg, "Missing Files", System.Windows.Forms.MessageBoxButtons.YesNo, System.Windows.Forms.MessageBoxIcon.Warning);
                return choice == DialogResult.Yes;
            }
            catch { return true; }
        }

        private void linkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TryOpenLink(doorstopLink.Text);
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TryOpenLink(shelteredLink.Text);
        }

        private void linkLabel1_LinkClicked_1(object sender, LinkLabelLinkClickedEventArgs e)
        {
            TryOpenLink(harmonyLink.Text);
        }

        private void TryOpenLink(string text)
        {
            try
            {
                var url = ExtractFirstUrl(text);
                if (string.IsNullOrEmpty(url))
                {
                    System.Windows.Forms.MessageBox.Show("No valid URL found.", "Open Link", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Information);
                    return;
                }
                var psi = new ProcessStartInfo();
                psi.FileName = url;
                psi.UseShellExecute = true;
                Process.Start(psi);
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show("Failed to open link: " + ex.Message, "Open Link", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
            }
        }

        private static string ExtractFirstUrl(string text)
        {
            if (string.IsNullOrEmpty(text)) return null;
            int i = text.IndexOf("http://", StringComparison.OrdinalIgnoreCase);
            if (i < 0) i = text.IndexOf("https://", StringComparison.OrdinalIgnoreCase);
            if (i < 0) return null;
            int end = i;
            while (end < text.Length && !char.IsWhiteSpace(text[end])) end++;
            return text.Substring(i, end - i);
        }

        private void uiGamePath_TextChanged_1(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(uiGamePath.Text) || uiGamePath.Text.Trim().Equals(DEFAULT_VALUE, StringComparison.OrdinalIgnoreCase)) return;
            uiLaunchButton.Enabled = File.Exists(uiGamePath.Text);
            uiOpenGameDir.Enabled = File.Exists(uiGamePath.Text);
            SaveSettings();
            try
            {
                if (File.Exists(uiGamePath.Text))
                {
                    string modsDir = Path.Combine(Path.GetDirectoryName(uiGamePath.Text), "mods");
                    uiModsPath.Text = modsDir;
                    updateAvailableMods();
                }
            }
            catch { }
        }

        private void uiOpenGameDir_Click(object sender, EventArgs e)
        {
            try { Process.Start(Path.GetDirectoryName(uiGamePath.Text)); } catch { }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // Enable selected (add to order)
            var selected = uiAvailbleModsListView.SelectedItems.Cast<Manager.ManagerGUI.ModListItem>().ToList();
            if (selected == null || selected.Count == 0) return;
            try
            {
                var modsRoot = uiModsPath.Text;
                var order = new List<string>(ReadOrderFromFile(modsRoot) ?? new string[0]);
                foreach (var obj in selected)
                {
                    var item = obj; // ModListItem
                    if (item == null) continue;
                    string id = item.Id;
                    if (string.IsNullOrEmpty(id)) continue;
                    if (!order.Any(x => string.Equals(x, id, StringComparison.OrdinalIgnoreCase))) order.Add(id);
                }
                WriteOrderToFile(modsRoot, order);
                updateAvailableMods();
            }
            catch { }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // Disable selected (remove from order)
            var selected = uiInstalledModsListView.SelectedItems.Cast<Manager.ManagerGUI.ModListItem>().ToList();
            if (selected == null || selected.Count == 0) return;
            try
            {
                var modsRoot = uiModsPath.Text;
                var order = new List<string>(ReadOrderFromFile(modsRoot) ?? new string[0]);
                foreach (var obj in selected)
                {
                    var item = obj as Manager.ManagerGUI.ModListItem; if (item == null) continue; string id = item.Id;
                    order.RemoveAll(x => string.Equals(x, id, StringComparison.OrdinalIgnoreCase));
                }
                WriteOrderToFile(modsRoot, order);
                updateAvailableMods();
            }
            catch { }
        }

        private void uiAvailbleModsListView_DoubleClick(object sender, EventArgs e) { button1_Click(sender, e); }
        private void uiInstalledModsListView_DoubleClick(object sender, EventArgs e) { button2_Click(sender, e); }

        private void btnMoveUpEnabled_Click(object sender, EventArgs e)
        {
            if (uiInstalledModsListView.SelectedItem == null) return;
            int index = uiInstalledModsListView.SelectedIndex;
            if (index <= 0) return;

            var item = uiInstalledModsListView.SelectedItem;
            uiInstalledModsListView.Items.RemoveAt(index);
            uiInstalledModsListView.Items.Insert(index - 1, item);
            uiInstalledModsListView.SelectedIndex = index - 1;
            _orderDirty = true;
            SaveCurrentOrderToDisk();
        }
        private void btnMoveDownEnabled_Click(object sender, EventArgs e)
        {
            if (uiInstalledModsListView.SelectedItem == null) return;
            int index = uiInstalledModsListView.SelectedIndex;
            if (index < 0 || index >= uiInstalledModsListView.Items.Count - 1) return;

            var item = uiInstalledModsListView.SelectedItem;
            uiInstalledModsListView.Items.RemoveAt(index);
            uiInstalledModsListView.Items.Insert(index + 1, item);
            uiInstalledModsListView.SelectedIndex = index + 1;
            _orderDirty = true;
            SaveCurrentOrderToDisk();
        }
        private void btnSaveOrder_Click(object sender, EventArgs e)
        {
            try
            {
                var enabledItems = uiInstalledModsListView.Items.Cast<ModListItem>().ToList();
                var discoveredMods = ToModEntries(enabledItems);
                var currentOrder = enabledItems.Select(m => m.Id).ToList();

                var resolution = LoadOrderResolver.Resolve(discoveredMods, currentOrder);

                if (resolution.MissingHardDependencies.Any() || resolution.CycledModIds.Any())
                {
                    var error = new System.Text.StringBuilder();
                    error.AppendLine("Could not automatically sort due to errors:");
                    if (resolution.MissingHardDependencies.Any())
                    {
                        error.AppendLine("\nMissing Dependencies:");
                        foreach(var msg in resolution.MissingHardDependencies) error.AppendLine("- " + msg);
                    }
                    if (resolution.CycledModIds.Any())
                    {
                        error.AppendLine("\nCyclical Dependencies Detected:");
                        error.AppendLine("- " + string.Join(", ", resolution.CycledModIds.ToArray()));
                    }
                    System.Windows.Forms.MessageBox.Show(error.ToString(), "Auto-Sort Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
                    return;
                }

                var sortedMods = resolution.Mods;
                var itemsById = enabledItems.ToDictionary(m => m.Id, StringComparer.OrdinalIgnoreCase);

                uiInstalledModsListView.BeginUpdate();
                uiInstalledModsListView.Items.Clear();
                foreach (var sortedMod in sortedMods)
                {
                    if (itemsById.ContainsKey(sortedMod.Id))
                    {
                        uiInstalledModsListView.Items.Add(itemsById[sortedMod.Id]);
                    }
                }
                uiInstalledModsListView.EndUpdate();

                SaveCurrentOrderToDisk();

                System.Windows.Forms.MessageBox.Show("Mods have been automatically sorted based on their dependencies.", "Auto-Sort Complete", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show("An error occurred during auto-sort: " + ex.Message, "Error", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
            }
        }

        private void SaveCurrentOrderToDisk()
        {
            try
            {
                var modsRoot = uiModsPath.Text;
                var currentUiOrder = uiInstalledModsListView.Items.Cast<Manager.ManagerGUI.ModListItem>().Select(mi => mi.Id).ToList();
                WriteOrderToFile(modsRoot, currentUiOrder);
                updateAvailableMods();
            }
            catch { }
        }

        private class SimpleLoadOrder { public string[] order; }
        private static bool IsNullOrWhiteSpaceCompat(string s) { return s == null || s.Trim().Length == 0; }
        private string[] ReadOrderFromFile(string modsRoot)
        {
            try
            {
                var path = Path.Combine(modsRoot, "loadorder.json");
                if (!File.Exists(path)) return new string[0];
                var json = File.ReadAllText(path);
                var obj = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<SimpleLoadOrder>(json);
                var raw = (obj != null && obj.order != null) ? obj.order : new string[0];
                var list = new List<string>();
                foreach (var s in raw)
                {
                    if (IsNullOrWhiteSpaceCompat(s)) continue;
                    var id = s.Trim().ToLowerInvariant();
                    if (!list.Contains(id)) list.Add(id);
                }
                return list.ToArray();
            }
            catch { return new string[0]; }
        }

        private void WriteOrderToFile(string modsRoot, IEnumerable<string> order)
        {
            try
            {
                var unique = new List<string>();
                foreach (var s in (order ?? new string[0]))
                {
                    if (IsNullOrWhiteSpaceCompat(s)) continue;
                    var id = s.Trim().ToLowerInvariant();
                    if (!unique.Any(x => string.Equals(x, id, StringComparison.OrdinalIgnoreCase))) unique.Add(id);
                }
                var json = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(new { order = unique.ToArray() });
                var path = Path.Combine(modsRoot, "loadorder.json");
                Directory.CreateDirectory(modsRoot);
                File.WriteAllText(path, json);
            }
            catch { }
        }

        // No-op handlers for designer wires (avoid breaking if missing)
        private void uiInstalledModsListView_SelectedIndexChanged(object sender, EventArgs e) { }
        private void uiAvailbleModsListView_SelectedIndexChanged(object sender, EventArgs e) { }
        private void uiInstaledLabel_Click(object sender, EventArgs e) { }
        private void tabPage1_Click(object sender, EventArgs e) { }
        private void label14_Click(object sender, EventArgs e) { }
        private void linkLabel1_LinkClicked_2(object sender, LinkLabelLinkClickedEventArgs e) { }
        private void richTextBox1_TextChanged(object sender, EventArgs e) { }
    }
}

